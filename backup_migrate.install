<?php
// $Id$


/**
 * @file
 * Install hooks for Backup and Migrate.
 */
function backup_migrate_requirements($phase) {
  $requirements = array();
  if ($GLOBALS['db_type'] !== 'mysqli' && $GLOBALS['db_type'] !== 'mysql') {
    $requirements['db_type']['description'] = $t('This module is only compatible with MySQL databases.');
    $requirements['db_type']['severity'] = REQUIREMENT_ERROR;
  }
}

/**
 * Implementation of hook_schema().
 */
function backup_migrate_schema() {
  $schema['backup_migrate_profiles'] = array(
    'fields' => array(
      'profile_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => t('The primary identifier for a profile.'),
      ),
      'name' => array(
        'description' => t('The name of the profile.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'exclude_tables' => array(
        'description' => t('The exclude tables.'),
        'type' => 'text',
        'not null' => TRUE
      ),
      'source_id' => array(
        'description' => t('The db source to backup from.'),
        'type' => 'varchar',
        'length' => 32,
        'default' => 'db_url:default',
        'not null' => TRUE
      ),
      'nodata_tables' => array(
        'description' => t('The no-data tables.'),
        'type' => 'text',
        'not null' => TRUE
      ),
      'filename' => array(
        'description' => t('The name of the profile.'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE
      ),
      'append_timestamp' => array(
        'description' => t('Append a timestamp to the filename.'),
        'type' => 'int',
        'size' => 'tiny',
        'length' => 1,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'timestamp_format' => array(
        'description' => t('The format of the timestamp.'),
        'type' => 'varchar',
        'length' => 14,
        'not null' => TRUE
      ),
      'filters' => array(
        'description' => t('The filter settings for the profile.'),
        'type' => 'text',
        'not null' => TRUE
      ),
    ),
    'primary key' => array('profile_id'),
  );
  $schema['backup_migrate_destinations'] = array(
    'fields' => array(
      'destination_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => t('The primary identifier for a destination.'),
      ),
      'name' => array(
        'description' => t('The name of the profile.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'type' => array(
        'description' => t('The type of the destination.'),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE
      ),
      'location' => array(
        'description' => t('The the location string of the destination.'),
        'type' => 'text',
        'not null' => TRUE
      ),
      'username' => array(
        'description' => t('The username for the destination.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'password' => array(
        'description' => t('The password for the destination.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'settings' => array(
        'description' => t('Other settings for the destination.'),
        'type' => 'text',
        'not null' => TRUE
      ),
    ),
    'primary key' => array('destination_id'),
  );
  $schema['backup_migrate_schedules'] = array(
    'fields' => array(
      'schedule_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'description' => t('The primary identifier for a destination.'),
      ),
     'name' => array(
        'description' => t('The name of the profile.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'destination_id' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The primary identifier for a destination.'),
      ),
      'profile_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The primary identifier for a profile.'),
      ),
      'keep' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The number of backups to keep.'),
      ),
      'period' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The number of seconds between backups.'),
      ),
      'last_run' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The last time the backup was run.'),
      ),
      'enabled' => array(
        'description' => t('Whether the schedule is enabled.'),
        'type' => 'int',
        'size' => 'tiny',
        'length' => 1,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'cron' => array(
        'description' => t('Whether the schedule should be run during cron.'),
        'type' => 'int',
        'size' => 'tiny',
        'length' => 1,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('schedule_id'),
  );

  return $schema;
}

function backup_migrate_install() {
  drupal_install_schema('backup_migrate');
  _backup_migrate_setup_databaase_defaults();
}

function _backup_migrate_setup_databaase_defaults() {
  require_once './'. drupal_get_path('module', 'backup_migrate') .'/backup_migrate.module';
  require_once './'. drupal_get_path('module', 'backup_migrate') .'/includes/profiles.inc';
  require_once './'. drupal_get_path('module', 'backup_migrate') .'/includes/db.inc';
  require_once './'. drupal_get_path('module', 'backup_migrate') .'/includes/files.inc';

  // Set up the default schedules.
  if (variable_get("backup_migrate_schedule_backup_period", 0)) {
    require_once './'. drupal_get_path('module', 'backup_migrate') .'/includes/schedules.inc';
    $schedule = array(
      'name' => t('Default Schedule'),
      'destination_id' => 'schedule,',
      'period' => array('number' => variable_get("backup_migrate_schedule_backup_period", 0), 'type' => 'hours'),
      'keep' => variable_get("backup_migrate_schedule_backup_keep", 0),
    );
    backup_migrate_schedule_save_schedule($schedule);
  }

  if (variable_get("backup_migrate_file_name", NULL)) {
    $settings = array(
      'source_id' => 'db_url:default',
      'exclude_tables' => variable_get("backup_migrate_exclude_tables", _backup_migrate_default_exclude_tables()),
      'nodata_tables' => variable_get("backup_migrate_nodata_tables", _backup_migrate_default_structure_only_tables()),
      'filename' => variable_get("backup_migrate_file_name", _backup_migrate_default_filename()),
      'append_timestamp' => variable_get("backup_migrate_append_timestamp", FALSE) ? 1 : 0,
      'timestamp_format' => variable_get("backup_migrate_timestamp_format", 'Y-m-d\TH-i-s'),
      'filters' => array('compression' => variable_get("backup_migrate_compression", "none")),
    );
    $settings['name'] = t('Default Profile');
    backup_migrate_profile_save_profile($settings);
  }
}

/**
 * Remove variables on uninstall.
 */
function backup_migrate_uninstall() {
  drupal_uninstall_schema('backup_migrate');

  db_query("DELETE FROM {variable} WHERE name LIKE 'backup_migrate_%'");
  cache_clear_all('variables', 'cache');
}

/**
 * Update from 1.x to 2.x.
 */
function backup_migrate_update_2000() {
  // Updating from version 1.x, need to populate the db.
  drupal_install_schema('backup_migrate');
  _backup_migrate_setup_databaase_defaults();
  return array();
}

/**
 * Adding filter field for dev release of 2009-01-28
 */
function backup_migrate_update_2001() {
  $ret = array();
  // Add the filters field to the db.
  db_add_field($ret, 'backup_migrate_profiles', 'filters', array('description' => t('The filter settings for the profile.'),'type' => 'text', 'not null' => TRUE));
  // Add the source field
  db_add_field($ret, 'backup_migrate_profiles', 'source_id', array('description' => t('The db source to backup from.'), 'type' => 'varchar', 'length' => 32, 'default' => 'db_url:default', 'not null' => TRUE));
  // Remove the compression field.
  db_drop_field($ret, 'backup_migrate_profiles', 'compression');
  return $ret;
}

